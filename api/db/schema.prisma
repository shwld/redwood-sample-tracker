datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id             String @id @default(uuid())
  email          String  @unique
  name           String
  avatarImageUrl String
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  requestedStories    Story[]
  stories             OwnerOnStory[]
  accounts            MemberOnAccount[]
  projects            MemberOnProject[]
  storyActivities     StoryActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id             String @id @default(uuid())
  name           String
  projects       Project[]
  members        MemberOnAccount[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MemberOnAccount {
  accountId      String
  account        Account @relation(fields: [accountId], references: [id])
  memberId       String
  member         User @relation(fields: [memberId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([memberId, accountId])
}

model Project {
  id             String @id @default(uuid())
  name           String
  privacy        ProjectPrivacy
  description    String
  accountId      String
  account        Account @relation(fields: [accountId], references: [id])
  stories        Story[]
  members        MemberOnProject[]
  currentVerocity Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MemberOnProject {
  projectId      String
  project        Project @relation(fields: [projectId], references: [id])
  memberId       String
  member         User @relation(fields: [memberId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([projectId, memberId])
}

model Story {
  id         String @id @default(uuid())
  title      String
  description       String?
  state     StoryState?
  points     Int?
  requesterId   String?
  requester     User?   @relation(fields: [requesterId], references: [id])
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id])
  owners        OwnerOnStory[]
  storyOrders   StoryOrder[]
  labels        LabelOnStory[]
  activities  StoryActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model OwnerOnStory {
  storyId    String
  story      Story   @relation(fields: [storyId], references: [id])
  ownerId    String
  owner      User   @relation(fields: [ownerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([storyId, ownerId])
}

model StoryOrder {
  storyId    String
  story      Story   @relation(fields: [storyId], references: [id])
  order      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([storyId])
}

model LabelOnStory {
  storyId    String
  story      Story   @relation(fields: [storyId], references: [id])
  labelId    String
  label      Label   @relation(fields: [labelId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([storyId, labelId])
}

model Label {
  id         String @id @default(uuid())
  name       String
  color      String
  stories    LabelOnStory[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StoryActivity {
  id         String @id @default(uuid())
  storyId    String
  story     Story   @relation(fields: [storyId], references: [id])
  userId     String
  user       User   @relation(fields: [userId], references: [id])
  content    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ProjectPrivacy {
  PRIVATE
  PUBLIC
}

enum StoryState {
  UNSTARTED
  STARTED
  FINISHED
  DELIVERED
  REJECTED
  ACCEPTED
}

enum StoryType {
  FEATURE
  BUG
  CHORE
  RELEASE
}
