datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id             String @id @default(uuid())
  email          String  @unique
  name           String
  avatarImageUrl String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  stories             Story[]
  accounts            Account[]
  projects            Project[]
  storyActivities     StoryActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id             String @id @default(uuid())
  name           String
  projects       Project[]
  members        User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Project {
  id             String @id @default(uuid())
  name           String
  privacy        ProjectPrivacy
  description    String
  accountId      String
  account        Account @relation(fields: [accountId], references: [id])
  stories        Story[]
  members        User[]
  currentVelocity Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Story {
  id         String @id @default(uuid())
  title      String
  description       String?
  state      StoryState?
  type       StoryType @default(FEATURE)
  points     Int?
  requesterId   String?
  projectId   String?
  releaseDate DateTime?
  isIcebox    Boolean?
  project     Project?   @relation(fields: [projectId], references: [id])
  owners        User[]
  storyOrders   StoryOrder[]
  labels        Label[]
  activities  StoryActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StoryOrder {
  storyId    String
  story      Story   @relation(fields: [storyId], references: [id])
  order      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([storyId])
}

model Label {
  id         String @id @default(uuid())
  name       String
  color      String
  stories    Story[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StoryActivity {
  id         String @id @default(uuid())
  storyId    String
  story     Story   @relation(fields: [storyId], references: [id])
  userId     String
  user       User   @relation(fields: [userId], references: [id])
  content    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ProjectPrivacy {
  PRIVATE
  PUBLIC
}

enum StoryState {
  UNSTARTED
  STARTED
  FINISHED
  DELIVERED
  REJECTED
  ACCEPTED
}

enum StoryType {
  FEATURE
  BUG
  CHORE
  RELEASE
}
